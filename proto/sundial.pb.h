// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sundial.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sundial_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sundial_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sundial_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sundial_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sundial_2eproto;
namespace sundial_rpc {
class SundialRequest;
class SundialRequestDefaultTypeInternal;
extern SundialRequestDefaultTypeInternal _SundialRequest_default_instance_;
class SundialRequest_ReadRequest;
class SundialRequest_ReadRequestDefaultTypeInternal;
extern SundialRequest_ReadRequestDefaultTypeInternal _SundialRequest_ReadRequest_default_instance_;
class SundialRequest_TupleData;
class SundialRequest_TupleDataDefaultTypeInternal;
extern SundialRequest_TupleDataDefaultTypeInternal _SundialRequest_TupleData_default_instance_;
class SundialResponse;
class SundialResponseDefaultTypeInternal;
extern SundialResponseDefaultTypeInternal _SundialResponse_default_instance_;
class SundialResponse_TupleData;
class SundialResponse_TupleDataDefaultTypeInternal;
extern SundialResponse_TupleDataDefaultTypeInternal _SundialResponse_TupleData_default_instance_;
}  // namespace sundial_rpc
PROTOBUF_NAMESPACE_OPEN
template<> ::sundial_rpc::SundialRequest* Arena::CreateMaybeMessage<::sundial_rpc::SundialRequest>(Arena*);
template<> ::sundial_rpc::SundialRequest_ReadRequest* Arena::CreateMaybeMessage<::sundial_rpc::SundialRequest_ReadRequest>(Arena*);
template<> ::sundial_rpc::SundialRequest_TupleData* Arena::CreateMaybeMessage<::sundial_rpc::SundialRequest_TupleData>(Arena*);
template<> ::sundial_rpc::SundialResponse* Arena::CreateMaybeMessage<::sundial_rpc::SundialResponse>(Arena*);
template<> ::sundial_rpc::SundialResponse_TupleData* Arena::CreateMaybeMessage<::sundial_rpc::SundialResponse_TupleData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sundial_rpc {

enum SundialRequest_RequestType : int {
  SundialRequest_RequestType_READ_REQ = 0,
  SundialRequest_RequestType_PREPARE_REQ = 1,
  SundialRequest_RequestType_COMMIT_REQ = 2,
  SundialRequest_RequestType_ABORT_REQ = 3,
  SundialRequest_RequestType_SYS_REQ = 4,
  SundialRequest_RequestType_LOG_YES_REQ = 5,
  SundialRequest_RequestType_LOG_ABORT_REQ = 6,
  SundialRequest_RequestType_LOG_COMMIT_REQ = 7,
  SundialRequest_RequestType_NUM_REQ_TYPES = 8,
  SundialRequest_RequestType_SundialRequest_RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SundialRequest_RequestType_SundialRequest_RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SundialRequest_RequestType_IsValid(int value);
constexpr SundialRequest_RequestType SundialRequest_RequestType_RequestType_MIN = SundialRequest_RequestType_READ_REQ;
constexpr SundialRequest_RequestType SundialRequest_RequestType_RequestType_MAX = SundialRequest_RequestType_NUM_REQ_TYPES;
constexpr int SundialRequest_RequestType_RequestType_ARRAYSIZE = SundialRequest_RequestType_RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SundialRequest_RequestType_descriptor();
template<typename T>
inline const std::string& SundialRequest_RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SundialRequest_RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SundialRequest_RequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SundialRequest_RequestType_descriptor(), enum_t_value);
}
inline bool SundialRequest_RequestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SundialRequest_RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SundialRequest_RequestType>(
    SundialRequest_RequestType_descriptor(), name, value);
}
enum SundialResponse_ResponseType : int {
  SundialResponse_ResponseType_RESP_OK = 0,
  SundialResponse_ResponseType_RESP_ABORT = 1,
  SundialResponse_ResponseType_PREPARED_OK = 2,
  SundialResponse_ResponseType_PREPARED_OK_RO = 3,
  SundialResponse_ResponseType_PREPARED_ABORT = 4,
  SundialResponse_ResponseType_ACK = 5,
  SundialResponse_ResponseType_SYS_RESP = 6,
  SundialResponse_ResponseType_RESP_LOG_YES = 7,
  SundialResponse_ResponseType_RESP_LOG_ABORT = 8,
  SundialResponse_ResponseType_RESP_LOG_COMMIT = 9,
  SundialResponse_ResponseType_NUM_RESP_TYPES = 10,
  SundialResponse_ResponseType_SundialResponse_ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SundialResponse_ResponseType_SundialResponse_ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SundialResponse_ResponseType_IsValid(int value);
constexpr SundialResponse_ResponseType SundialResponse_ResponseType_ResponseType_MIN = SundialResponse_ResponseType_RESP_OK;
constexpr SundialResponse_ResponseType SundialResponse_ResponseType_ResponseType_MAX = SundialResponse_ResponseType_NUM_RESP_TYPES;
constexpr int SundialResponse_ResponseType_ResponseType_ARRAYSIZE = SundialResponse_ResponseType_ResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SundialResponse_ResponseType_descriptor();
template<typename T>
inline const std::string& SundialResponse_ResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SundialResponse_ResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SundialResponse_ResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SundialResponse_ResponseType_descriptor(), enum_t_value);
}
inline bool SundialResponse_ResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SundialResponse_ResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SundialResponse_ResponseType>(
    SundialResponse_ResponseType_descriptor(), name, value);
}
// ===================================================================

class SundialRequest_ReadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sundial_rpc.SundialRequest.ReadRequest) */ {
 public:
  inline SundialRequest_ReadRequest() : SundialRequest_ReadRequest(nullptr) {}
  virtual ~SundialRequest_ReadRequest();

  SundialRequest_ReadRequest(const SundialRequest_ReadRequest& from);
  SundialRequest_ReadRequest(SundialRequest_ReadRequest&& from) noexcept
    : SundialRequest_ReadRequest() {
    *this = ::std::move(from);
  }

  inline SundialRequest_ReadRequest& operator=(const SundialRequest_ReadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SundialRequest_ReadRequest& operator=(SundialRequest_ReadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SundialRequest_ReadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SundialRequest_ReadRequest* internal_default_instance() {
    return reinterpret_cast<const SundialRequest_ReadRequest*>(
               &_SundialRequest_ReadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SundialRequest_ReadRequest& a, SundialRequest_ReadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SundialRequest_ReadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SundialRequest_ReadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SundialRequest_ReadRequest* New() const final {
    return CreateMaybeMessage<SundialRequest_ReadRequest>(nullptr);
  }

  SundialRequest_ReadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SundialRequest_ReadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SundialRequest_ReadRequest& from);
  void MergeFrom(const SundialRequest_ReadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SundialRequest_ReadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sundial_rpc.SundialRequest.ReadRequest";
  }
  protected:
  explicit SundialRequest_ReadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sundial_2eproto);
    return ::descriptor_table_sundial_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kIndexIdFieldNumber = 2,
    kAccessTypeFieldNumber = 3,
  };
  // uint64 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint64 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 index_id = 2;
  void clear_index_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 index_id() const;
  void set_index_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index_id() const;
  void _internal_set_index_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 access_type = 3;
  void clear_access_type();
  ::PROTOBUF_NAMESPACE_ID::uint64 access_type() const;
  void set_access_type(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_access_type() const;
  void _internal_set_access_type(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:sundial_rpc.SundialRequest.ReadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 access_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sundial_2eproto;
};
// -------------------------------------------------------------------

class SundialRequest_TupleData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sundial_rpc.SundialRequest.TupleData) */ {
 public:
  inline SundialRequest_TupleData() : SundialRequest_TupleData(nullptr) {}
  virtual ~SundialRequest_TupleData();

  SundialRequest_TupleData(const SundialRequest_TupleData& from);
  SundialRequest_TupleData(SundialRequest_TupleData&& from) noexcept
    : SundialRequest_TupleData() {
    *this = ::std::move(from);
  }

  inline SundialRequest_TupleData& operator=(const SundialRequest_TupleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SundialRequest_TupleData& operator=(SundialRequest_TupleData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SundialRequest_TupleData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SundialRequest_TupleData* internal_default_instance() {
    return reinterpret_cast<const SundialRequest_TupleData*>(
               &_SundialRequest_TupleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SundialRequest_TupleData& a, SundialRequest_TupleData& b) {
    a.Swap(&b);
  }
  inline void Swap(SundialRequest_TupleData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SundialRequest_TupleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SundialRequest_TupleData* New() const final {
    return CreateMaybeMessage<SundialRequest_TupleData>(nullptr);
  }

  SundialRequest_TupleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SundialRequest_TupleData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SundialRequest_TupleData& from);
  void MergeFrom(const SundialRequest_TupleData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SundialRequest_TupleData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sundial_rpc.SundialRequest.TupleData";
  }
  protected:
  explicit SundialRequest_TupleData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sundial_2eproto);
    return ::descriptor_table_sundial_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kKeyFieldNumber = 1,
    kTableIdFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint64 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 table_id = 2;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:sundial_rpc.SundialRequest.TupleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 table_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sundial_2eproto;
};
// -------------------------------------------------------------------

class SundialRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sundial_rpc.SundialRequest) */ {
 public:
  inline SundialRequest() : SundialRequest(nullptr) {}
  virtual ~SundialRequest();

  SundialRequest(const SundialRequest& from);
  SundialRequest(SundialRequest&& from) noexcept
    : SundialRequest() {
    *this = ::std::move(from);
  }

  inline SundialRequest& operator=(const SundialRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SundialRequest& operator=(SundialRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SundialRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SundialRequest* internal_default_instance() {
    return reinterpret_cast<const SundialRequest*>(
               &_SundialRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SundialRequest& a, SundialRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SundialRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SundialRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SundialRequest* New() const final {
    return CreateMaybeMessage<SundialRequest>(nullptr);
  }

  SundialRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SundialRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SundialRequest& from);
  void MergeFrom(const SundialRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SundialRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sundial_rpc.SundialRequest";
  }
  protected:
  explicit SundialRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sundial_2eproto);
    return ::descriptor_table_sundial_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SundialRequest_ReadRequest ReadRequest;
  typedef SundialRequest_TupleData TupleData;

  typedef SundialRequest_RequestType RequestType;
  static constexpr RequestType READ_REQ =
    SundialRequest_RequestType_READ_REQ;
  static constexpr RequestType PREPARE_REQ =
    SundialRequest_RequestType_PREPARE_REQ;
  static constexpr RequestType COMMIT_REQ =
    SundialRequest_RequestType_COMMIT_REQ;
  static constexpr RequestType ABORT_REQ =
    SundialRequest_RequestType_ABORT_REQ;
  static constexpr RequestType SYS_REQ =
    SundialRequest_RequestType_SYS_REQ;
  static constexpr RequestType LOG_YES_REQ =
    SundialRequest_RequestType_LOG_YES_REQ;
  static constexpr RequestType LOG_ABORT_REQ =
    SundialRequest_RequestType_LOG_ABORT_REQ;
  static constexpr RequestType LOG_COMMIT_REQ =
    SundialRequest_RequestType_LOG_COMMIT_REQ;
  static constexpr RequestType NUM_REQ_TYPES =
    SundialRequest_RequestType_NUM_REQ_TYPES;
  static inline bool RequestType_IsValid(int value) {
    return SundialRequest_RequestType_IsValid(value);
  }
  static constexpr RequestType RequestType_MIN =
    SundialRequest_RequestType_RequestType_MIN;
  static constexpr RequestType RequestType_MAX =
    SundialRequest_RequestType_RequestType_MAX;
  static constexpr int RequestType_ARRAYSIZE =
    SundialRequest_RequestType_RequestType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RequestType_descriptor() {
    return SundialRequest_RequestType_descriptor();
  }
  template<typename T>
  static inline const std::string& RequestType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RequestType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RequestType_Name.");
    return SundialRequest_RequestType_Name(enum_t_value);
  }
  static inline bool RequestType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RequestType* value) {
    return SundialRequest_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReadRequestsFieldNumber = 3,
    kTupleDataFieldNumber = 4,
    kLogDataFieldNumber = 6,
    kTxnIdFieldNumber = 1,
    kLogDataSizeFieldNumber = 5,
    kRequestTypeFieldNumber = 2,
  };
  // repeated .sundial_rpc.SundialRequest.ReadRequest read_requests = 3;
  int read_requests_size() const;
  private:
  int _internal_read_requests_size() const;
  public:
  void clear_read_requests();
  ::sundial_rpc::SundialRequest_ReadRequest* mutable_read_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sundial_rpc::SundialRequest_ReadRequest >*
      mutable_read_requests();
  private:
  const ::sundial_rpc::SundialRequest_ReadRequest& _internal_read_requests(int index) const;
  ::sundial_rpc::SundialRequest_ReadRequest* _internal_add_read_requests();
  public:
  const ::sundial_rpc::SundialRequest_ReadRequest& read_requests(int index) const;
  ::sundial_rpc::SundialRequest_ReadRequest* add_read_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sundial_rpc::SundialRequest_ReadRequest >&
      read_requests() const;

  // repeated .sundial_rpc.SundialRequest.TupleData tuple_data = 4;
  int tuple_data_size() const;
  private:
  int _internal_tuple_data_size() const;
  public:
  void clear_tuple_data();
  ::sundial_rpc::SundialRequest_TupleData* mutable_tuple_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sundial_rpc::SundialRequest_TupleData >*
      mutable_tuple_data();
  private:
  const ::sundial_rpc::SundialRequest_TupleData& _internal_tuple_data(int index) const;
  ::sundial_rpc::SundialRequest_TupleData* _internal_add_tuple_data();
  public:
  const ::sundial_rpc::SundialRequest_TupleData& tuple_data(int index) const;
  ::sundial_rpc::SundialRequest_TupleData* add_tuple_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sundial_rpc::SundialRequest_TupleData >&
      tuple_data() const;

  // bytes log_data = 6;
  void clear_log_data();
  const std::string& log_data() const;
  void set_log_data(const std::string& value);
  void set_log_data(std::string&& value);
  void set_log_data(const char* value);
  void set_log_data(const void* value, size_t size);
  std::string* mutable_log_data();
  std::string* release_log_data();
  void set_allocated_log_data(std::string* log_data);
  private:
  const std::string& _internal_log_data() const;
  void _internal_set_log_data(const std::string& value);
  std::string* _internal_mutable_log_data();
  public:

  // uint64 txn_id = 1;
  void clear_txn_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 txn_id() const;
  void set_txn_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_txn_id() const;
  void _internal_set_txn_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 log_data_size = 5;
  void clear_log_data_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 log_data_size() const;
  void set_log_data_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_log_data_size() const;
  void _internal_set_log_data_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .sundial_rpc.SundialRequest.RequestType request_type = 2;
  void clear_request_type();
  ::sundial_rpc::SundialRequest_RequestType request_type() const;
  void set_request_type(::sundial_rpc::SundialRequest_RequestType value);
  private:
  ::sundial_rpc::SundialRequest_RequestType _internal_request_type() const;
  void _internal_set_request_type(::sundial_rpc::SundialRequest_RequestType value);
  public:

  // @@protoc_insertion_point(class_scope:sundial_rpc.SundialRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sundial_rpc::SundialRequest_ReadRequest > read_requests_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sundial_rpc::SundialRequest_TupleData > tuple_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 txn_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 log_data_size_;
  int request_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sundial_2eproto;
};
// -------------------------------------------------------------------

class SundialResponse_TupleData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sundial_rpc.SundialResponse.TupleData) */ {
 public:
  inline SundialResponse_TupleData() : SundialResponse_TupleData(nullptr) {}
  virtual ~SundialResponse_TupleData();

  SundialResponse_TupleData(const SundialResponse_TupleData& from);
  SundialResponse_TupleData(SundialResponse_TupleData&& from) noexcept
    : SundialResponse_TupleData() {
    *this = ::std::move(from);
  }

  inline SundialResponse_TupleData& operator=(const SundialResponse_TupleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SundialResponse_TupleData& operator=(SundialResponse_TupleData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SundialResponse_TupleData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SundialResponse_TupleData* internal_default_instance() {
    return reinterpret_cast<const SundialResponse_TupleData*>(
               &_SundialResponse_TupleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SundialResponse_TupleData& a, SundialResponse_TupleData& b) {
    a.Swap(&b);
  }
  inline void Swap(SundialResponse_TupleData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SundialResponse_TupleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SundialResponse_TupleData* New() const final {
    return CreateMaybeMessage<SundialResponse_TupleData>(nullptr);
  }

  SundialResponse_TupleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SundialResponse_TupleData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SundialResponse_TupleData& from);
  void MergeFrom(const SundialResponse_TupleData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SundialResponse_TupleData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sundial_rpc.SundialResponse.TupleData";
  }
  protected:
  explicit SundialResponse_TupleData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sundial_2eproto);
    return ::descriptor_table_sundial_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kKeyFieldNumber = 1,
    kTableIdFieldNumber = 2,
    kSizeFieldNumber = 3,
    kAccessTypeFieldNumber = 5,
  };
  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint64 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 table_id = 2;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 access_type = 5;
  void clear_access_type();
  ::PROTOBUF_NAMESPACE_ID::uint64 access_type() const;
  void set_access_type(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_access_type() const;
  void _internal_set_access_type(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:sundial_rpc.SundialResponse.TupleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 table_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 access_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sundial_2eproto;
};
// -------------------------------------------------------------------

class SundialResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sundial_rpc.SundialResponse) */ {
 public:
  inline SundialResponse() : SundialResponse(nullptr) {}
  virtual ~SundialResponse();

  SundialResponse(const SundialResponse& from);
  SundialResponse(SundialResponse&& from) noexcept
    : SundialResponse() {
    *this = ::std::move(from);
  }

  inline SundialResponse& operator=(const SundialResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SundialResponse& operator=(SundialResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SundialResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SundialResponse* internal_default_instance() {
    return reinterpret_cast<const SundialResponse*>(
               &_SundialResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SundialResponse& a, SundialResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SundialResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SundialResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SundialResponse* New() const final {
    return CreateMaybeMessage<SundialResponse>(nullptr);
  }

  SundialResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SundialResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SundialResponse& from);
  void MergeFrom(const SundialResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SundialResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sundial_rpc.SundialResponse";
  }
  protected:
  explicit SundialResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sundial_2eproto);
    return ::descriptor_table_sundial_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SundialResponse_TupleData TupleData;

  typedef SundialResponse_ResponseType ResponseType;
  static constexpr ResponseType RESP_OK =
    SundialResponse_ResponseType_RESP_OK;
  static constexpr ResponseType RESP_ABORT =
    SundialResponse_ResponseType_RESP_ABORT;
  static constexpr ResponseType PREPARED_OK =
    SundialResponse_ResponseType_PREPARED_OK;
  static constexpr ResponseType PREPARED_OK_RO =
    SundialResponse_ResponseType_PREPARED_OK_RO;
  static constexpr ResponseType PREPARED_ABORT =
    SundialResponse_ResponseType_PREPARED_ABORT;
  static constexpr ResponseType ACK =
    SundialResponse_ResponseType_ACK;
  static constexpr ResponseType SYS_RESP =
    SundialResponse_ResponseType_SYS_RESP;
  static constexpr ResponseType RESP_LOG_YES =
    SundialResponse_ResponseType_RESP_LOG_YES;
  static constexpr ResponseType RESP_LOG_ABORT =
    SundialResponse_ResponseType_RESP_LOG_ABORT;
  static constexpr ResponseType RESP_LOG_COMMIT =
    SundialResponse_ResponseType_RESP_LOG_COMMIT;
  static constexpr ResponseType NUM_RESP_TYPES =
    SundialResponse_ResponseType_NUM_RESP_TYPES;
  static inline bool ResponseType_IsValid(int value) {
    return SundialResponse_ResponseType_IsValid(value);
  }
  static constexpr ResponseType ResponseType_MIN =
    SundialResponse_ResponseType_ResponseType_MIN;
  static constexpr ResponseType ResponseType_MAX =
    SundialResponse_ResponseType_ResponseType_MAX;
  static constexpr int ResponseType_ARRAYSIZE =
    SundialResponse_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResponseType_descriptor() {
    return SundialResponse_ResponseType_descriptor();
  }
  template<typename T>
  static inline const std::string& ResponseType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResponseType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResponseType_Name.");
    return SundialResponse_ResponseType_Name(enum_t_value);
  }
  static inline bool ResponseType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ResponseType* value) {
    return SundialResponse_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTupleDataFieldNumber = 3,
    kTxnIdFieldNumber = 1,
    kResponseTypeFieldNumber = 2,
  };
  // repeated .sundial_rpc.SundialResponse.TupleData tuple_data = 3;
  int tuple_data_size() const;
  private:
  int _internal_tuple_data_size() const;
  public:
  void clear_tuple_data();
  ::sundial_rpc::SundialResponse_TupleData* mutable_tuple_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sundial_rpc::SundialResponse_TupleData >*
      mutable_tuple_data();
  private:
  const ::sundial_rpc::SundialResponse_TupleData& _internal_tuple_data(int index) const;
  ::sundial_rpc::SundialResponse_TupleData* _internal_add_tuple_data();
  public:
  const ::sundial_rpc::SundialResponse_TupleData& tuple_data(int index) const;
  ::sundial_rpc::SundialResponse_TupleData* add_tuple_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sundial_rpc::SundialResponse_TupleData >&
      tuple_data() const;

  // uint64 txn_id = 1;
  void clear_txn_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 txn_id() const;
  void set_txn_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_txn_id() const;
  void _internal_set_txn_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .sundial_rpc.SundialResponse.ResponseType response_type = 2;
  void clear_response_type();
  ::sundial_rpc::SundialResponse_ResponseType response_type() const;
  void set_response_type(::sundial_rpc::SundialResponse_ResponseType value);
  private:
  ::sundial_rpc::SundialResponse_ResponseType _internal_response_type() const;
  void _internal_set_response_type(::sundial_rpc::SundialResponse_ResponseType value);
  public:

  // @@protoc_insertion_point(class_scope:sundial_rpc.SundialResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sundial_rpc::SundialResponse_TupleData > tuple_data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 txn_id_;
  int response_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sundial_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SundialRequest_ReadRequest

// uint64 key = 1;
inline void SundialRequest_ReadRequest::clear_key() {
  key_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialRequest_ReadRequest::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialRequest_ReadRequest::key() const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialRequest.ReadRequest.key)
  return _internal_key();
}
inline void SundialRequest_ReadRequest::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  key_ = value;
}
inline void SundialRequest_ReadRequest::set_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:sundial_rpc.SundialRequest.ReadRequest.key)
}

// uint64 index_id = 2;
inline void SundialRequest_ReadRequest::clear_index_id() {
  index_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialRequest_ReadRequest::_internal_index_id() const {
  return index_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialRequest_ReadRequest::index_id() const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialRequest.ReadRequest.index_id)
  return _internal_index_id();
}
inline void SundialRequest_ReadRequest::_internal_set_index_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_id_ = value;
}
inline void SundialRequest_ReadRequest::set_index_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index_id(value);
  // @@protoc_insertion_point(field_set:sundial_rpc.SundialRequest.ReadRequest.index_id)
}

// uint64 access_type = 3;
inline void SundialRequest_ReadRequest::clear_access_type() {
  access_type_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialRequest_ReadRequest::_internal_access_type() const {
  return access_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialRequest_ReadRequest::access_type() const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialRequest.ReadRequest.access_type)
  return _internal_access_type();
}
inline void SundialRequest_ReadRequest::_internal_set_access_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  access_type_ = value;
}
inline void SundialRequest_ReadRequest::set_access_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_access_type(value);
  // @@protoc_insertion_point(field_set:sundial_rpc.SundialRequest.ReadRequest.access_type)
}

// -------------------------------------------------------------------

// SundialRequest_TupleData

// uint64 key = 1;
inline void SundialRequest_TupleData::clear_key() {
  key_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialRequest_TupleData::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialRequest_TupleData::key() const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialRequest.TupleData.key)
  return _internal_key();
}
inline void SundialRequest_TupleData::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  key_ = value;
}
inline void SundialRequest_TupleData::set_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:sundial_rpc.SundialRequest.TupleData.key)
}

// uint64 table_id = 2;
inline void SundialRequest_TupleData::clear_table_id() {
  table_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialRequest_TupleData::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialRequest_TupleData::table_id() const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialRequest.TupleData.table_id)
  return _internal_table_id();
}
inline void SundialRequest_TupleData::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  table_id_ = value;
}
inline void SundialRequest_TupleData::set_table_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:sundial_rpc.SundialRequest.TupleData.table_id)
}

// uint64 size = 3;
inline void SundialRequest_TupleData::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialRequest_TupleData::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialRequest_TupleData::size() const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialRequest.TupleData.size)
  return _internal_size();
}
inline void SundialRequest_TupleData::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void SundialRequest_TupleData::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:sundial_rpc.SundialRequest.TupleData.size)
}

// bytes data = 4;
inline void SundialRequest_TupleData::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SundialRequest_TupleData::data() const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialRequest.TupleData.data)
  return _internal_data();
}
inline void SundialRequest_TupleData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:sundial_rpc.SundialRequest.TupleData.data)
}
inline std::string* SundialRequest_TupleData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:sundial_rpc.SundialRequest.TupleData.data)
  return _internal_mutable_data();
}
inline const std::string& SundialRequest_TupleData::_internal_data() const {
  return data_.Get();
}
inline void SundialRequest_TupleData::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SundialRequest_TupleData::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sundial_rpc.SundialRequest.TupleData.data)
}
inline void SundialRequest_TupleData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sundial_rpc.SundialRequest.TupleData.data)
}
inline void SundialRequest_TupleData::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sundial_rpc.SundialRequest.TupleData.data)
}
inline std::string* SundialRequest_TupleData::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SundialRequest_TupleData::release_data() {
  // @@protoc_insertion_point(field_release:sundial_rpc.SundialRequest.TupleData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SundialRequest_TupleData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sundial_rpc.SundialRequest.TupleData.data)
}

// -------------------------------------------------------------------

// SundialRequest

// uint64 txn_id = 1;
inline void SundialRequest::clear_txn_id() {
  txn_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialRequest::_internal_txn_id() const {
  return txn_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialRequest::txn_id() const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialRequest.txn_id)
  return _internal_txn_id();
}
inline void SundialRequest::_internal_set_txn_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  txn_id_ = value;
}
inline void SundialRequest::set_txn_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_txn_id(value);
  // @@protoc_insertion_point(field_set:sundial_rpc.SundialRequest.txn_id)
}

// .sundial_rpc.SundialRequest.RequestType request_type = 2;
inline void SundialRequest::clear_request_type() {
  request_type_ = 0;
}
inline ::sundial_rpc::SundialRequest_RequestType SundialRequest::_internal_request_type() const {
  return static_cast< ::sundial_rpc::SundialRequest_RequestType >(request_type_);
}
inline ::sundial_rpc::SundialRequest_RequestType SundialRequest::request_type() const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialRequest.request_type)
  return _internal_request_type();
}
inline void SundialRequest::_internal_set_request_type(::sundial_rpc::SundialRequest_RequestType value) {
  
  request_type_ = value;
}
inline void SundialRequest::set_request_type(::sundial_rpc::SundialRequest_RequestType value) {
  _internal_set_request_type(value);
  // @@protoc_insertion_point(field_set:sundial_rpc.SundialRequest.request_type)
}

// repeated .sundial_rpc.SundialRequest.ReadRequest read_requests = 3;
inline int SundialRequest::_internal_read_requests_size() const {
  return read_requests_.size();
}
inline int SundialRequest::read_requests_size() const {
  return _internal_read_requests_size();
}
inline void SundialRequest::clear_read_requests() {
  read_requests_.Clear();
}
inline ::sundial_rpc::SundialRequest_ReadRequest* SundialRequest::mutable_read_requests(int index) {
  // @@protoc_insertion_point(field_mutable:sundial_rpc.SundialRequest.read_requests)
  return read_requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sundial_rpc::SundialRequest_ReadRequest >*
SundialRequest::mutable_read_requests() {
  // @@protoc_insertion_point(field_mutable_list:sundial_rpc.SundialRequest.read_requests)
  return &read_requests_;
}
inline const ::sundial_rpc::SundialRequest_ReadRequest& SundialRequest::_internal_read_requests(int index) const {
  return read_requests_.Get(index);
}
inline const ::sundial_rpc::SundialRequest_ReadRequest& SundialRequest::read_requests(int index) const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialRequest.read_requests)
  return _internal_read_requests(index);
}
inline ::sundial_rpc::SundialRequest_ReadRequest* SundialRequest::_internal_add_read_requests() {
  return read_requests_.Add();
}
inline ::sundial_rpc::SundialRequest_ReadRequest* SundialRequest::add_read_requests() {
  // @@protoc_insertion_point(field_add:sundial_rpc.SundialRequest.read_requests)
  return _internal_add_read_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sundial_rpc::SundialRequest_ReadRequest >&
SundialRequest::read_requests() const {
  // @@protoc_insertion_point(field_list:sundial_rpc.SundialRequest.read_requests)
  return read_requests_;
}

// repeated .sundial_rpc.SundialRequest.TupleData tuple_data = 4;
inline int SundialRequest::_internal_tuple_data_size() const {
  return tuple_data_.size();
}
inline int SundialRequest::tuple_data_size() const {
  return _internal_tuple_data_size();
}
inline void SundialRequest::clear_tuple_data() {
  tuple_data_.Clear();
}
inline ::sundial_rpc::SundialRequest_TupleData* SundialRequest::mutable_tuple_data(int index) {
  // @@protoc_insertion_point(field_mutable:sundial_rpc.SundialRequest.tuple_data)
  return tuple_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sundial_rpc::SundialRequest_TupleData >*
SundialRequest::mutable_tuple_data() {
  // @@protoc_insertion_point(field_mutable_list:sundial_rpc.SundialRequest.tuple_data)
  return &tuple_data_;
}
inline const ::sundial_rpc::SundialRequest_TupleData& SundialRequest::_internal_tuple_data(int index) const {
  return tuple_data_.Get(index);
}
inline const ::sundial_rpc::SundialRequest_TupleData& SundialRequest::tuple_data(int index) const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialRequest.tuple_data)
  return _internal_tuple_data(index);
}
inline ::sundial_rpc::SundialRequest_TupleData* SundialRequest::_internal_add_tuple_data() {
  return tuple_data_.Add();
}
inline ::sundial_rpc::SundialRequest_TupleData* SundialRequest::add_tuple_data() {
  // @@protoc_insertion_point(field_add:sundial_rpc.SundialRequest.tuple_data)
  return _internal_add_tuple_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sundial_rpc::SundialRequest_TupleData >&
SundialRequest::tuple_data() const {
  // @@protoc_insertion_point(field_list:sundial_rpc.SundialRequest.tuple_data)
  return tuple_data_;
}

// uint64 log_data_size = 5;
inline void SundialRequest::clear_log_data_size() {
  log_data_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialRequest::_internal_log_data_size() const {
  return log_data_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialRequest::log_data_size() const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialRequest.log_data_size)
  return _internal_log_data_size();
}
inline void SundialRequest::_internal_set_log_data_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  log_data_size_ = value;
}
inline void SundialRequest::set_log_data_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_log_data_size(value);
  // @@protoc_insertion_point(field_set:sundial_rpc.SundialRequest.log_data_size)
}

// bytes log_data = 6;
inline void SundialRequest::clear_log_data() {
  log_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SundialRequest::log_data() const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialRequest.log_data)
  return _internal_log_data();
}
inline void SundialRequest::set_log_data(const std::string& value) {
  _internal_set_log_data(value);
  // @@protoc_insertion_point(field_set:sundial_rpc.SundialRequest.log_data)
}
inline std::string* SundialRequest::mutable_log_data() {
  // @@protoc_insertion_point(field_mutable:sundial_rpc.SundialRequest.log_data)
  return _internal_mutable_log_data();
}
inline const std::string& SundialRequest::_internal_log_data() const {
  return log_data_.Get();
}
inline void SundialRequest::_internal_set_log_data(const std::string& value) {
  
  log_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SundialRequest::set_log_data(std::string&& value) {
  
  log_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sundial_rpc.SundialRequest.log_data)
}
inline void SundialRequest::set_log_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sundial_rpc.SundialRequest.log_data)
}
inline void SundialRequest::set_log_data(const void* value,
    size_t size) {
  
  log_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sundial_rpc.SundialRequest.log_data)
}
inline std::string* SundialRequest::_internal_mutable_log_data() {
  
  return log_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SundialRequest::release_log_data() {
  // @@protoc_insertion_point(field_release:sundial_rpc.SundialRequest.log_data)
  return log_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SundialRequest::set_allocated_log_data(std::string* log_data) {
  if (log_data != nullptr) {
    
  } else {
    
  }
  log_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sundial_rpc.SundialRequest.log_data)
}

// -------------------------------------------------------------------

// SundialResponse_TupleData

// uint64 key = 1;
inline void SundialResponse_TupleData::clear_key() {
  key_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialResponse_TupleData::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialResponse_TupleData::key() const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialResponse.TupleData.key)
  return _internal_key();
}
inline void SundialResponse_TupleData::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  key_ = value;
}
inline void SundialResponse_TupleData::set_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:sundial_rpc.SundialResponse.TupleData.key)
}

// uint64 table_id = 2;
inline void SundialResponse_TupleData::clear_table_id() {
  table_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialResponse_TupleData::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialResponse_TupleData::table_id() const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialResponse.TupleData.table_id)
  return _internal_table_id();
}
inline void SundialResponse_TupleData::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  table_id_ = value;
}
inline void SundialResponse_TupleData::set_table_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:sundial_rpc.SundialResponse.TupleData.table_id)
}

// uint64 size = 3;
inline void SundialResponse_TupleData::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialResponse_TupleData::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialResponse_TupleData::size() const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialResponse.TupleData.size)
  return _internal_size();
}
inline void SundialResponse_TupleData::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void SundialResponse_TupleData::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:sundial_rpc.SundialResponse.TupleData.size)
}

// bytes data = 4;
inline void SundialResponse_TupleData::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SundialResponse_TupleData::data() const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialResponse.TupleData.data)
  return _internal_data();
}
inline void SundialResponse_TupleData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:sundial_rpc.SundialResponse.TupleData.data)
}
inline std::string* SundialResponse_TupleData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:sundial_rpc.SundialResponse.TupleData.data)
  return _internal_mutable_data();
}
inline const std::string& SundialResponse_TupleData::_internal_data() const {
  return data_.Get();
}
inline void SundialResponse_TupleData::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SundialResponse_TupleData::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sundial_rpc.SundialResponse.TupleData.data)
}
inline void SundialResponse_TupleData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sundial_rpc.SundialResponse.TupleData.data)
}
inline void SundialResponse_TupleData::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sundial_rpc.SundialResponse.TupleData.data)
}
inline std::string* SundialResponse_TupleData::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SundialResponse_TupleData::release_data() {
  // @@protoc_insertion_point(field_release:sundial_rpc.SundialResponse.TupleData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SundialResponse_TupleData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sundial_rpc.SundialResponse.TupleData.data)
}

// uint64 access_type = 5;
inline void SundialResponse_TupleData::clear_access_type() {
  access_type_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialResponse_TupleData::_internal_access_type() const {
  return access_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialResponse_TupleData::access_type() const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialResponse.TupleData.access_type)
  return _internal_access_type();
}
inline void SundialResponse_TupleData::_internal_set_access_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  access_type_ = value;
}
inline void SundialResponse_TupleData::set_access_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_access_type(value);
  // @@protoc_insertion_point(field_set:sundial_rpc.SundialResponse.TupleData.access_type)
}

// -------------------------------------------------------------------

// SundialResponse

// uint64 txn_id = 1;
inline void SundialResponse::clear_txn_id() {
  txn_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialResponse::_internal_txn_id() const {
  return txn_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SundialResponse::txn_id() const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialResponse.txn_id)
  return _internal_txn_id();
}
inline void SundialResponse::_internal_set_txn_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  txn_id_ = value;
}
inline void SundialResponse::set_txn_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_txn_id(value);
  // @@protoc_insertion_point(field_set:sundial_rpc.SundialResponse.txn_id)
}

// .sundial_rpc.SundialResponse.ResponseType response_type = 2;
inline void SundialResponse::clear_response_type() {
  response_type_ = 0;
}
inline ::sundial_rpc::SundialResponse_ResponseType SundialResponse::_internal_response_type() const {
  return static_cast< ::sundial_rpc::SundialResponse_ResponseType >(response_type_);
}
inline ::sundial_rpc::SundialResponse_ResponseType SundialResponse::response_type() const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialResponse.response_type)
  return _internal_response_type();
}
inline void SundialResponse::_internal_set_response_type(::sundial_rpc::SundialResponse_ResponseType value) {
  
  response_type_ = value;
}
inline void SundialResponse::set_response_type(::sundial_rpc::SundialResponse_ResponseType value) {
  _internal_set_response_type(value);
  // @@protoc_insertion_point(field_set:sundial_rpc.SundialResponse.response_type)
}

// repeated .sundial_rpc.SundialResponse.TupleData tuple_data = 3;
inline int SundialResponse::_internal_tuple_data_size() const {
  return tuple_data_.size();
}
inline int SundialResponse::tuple_data_size() const {
  return _internal_tuple_data_size();
}
inline void SundialResponse::clear_tuple_data() {
  tuple_data_.Clear();
}
inline ::sundial_rpc::SundialResponse_TupleData* SundialResponse::mutable_tuple_data(int index) {
  // @@protoc_insertion_point(field_mutable:sundial_rpc.SundialResponse.tuple_data)
  return tuple_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sundial_rpc::SundialResponse_TupleData >*
SundialResponse::mutable_tuple_data() {
  // @@protoc_insertion_point(field_mutable_list:sundial_rpc.SundialResponse.tuple_data)
  return &tuple_data_;
}
inline const ::sundial_rpc::SundialResponse_TupleData& SundialResponse::_internal_tuple_data(int index) const {
  return tuple_data_.Get(index);
}
inline const ::sundial_rpc::SundialResponse_TupleData& SundialResponse::tuple_data(int index) const {
  // @@protoc_insertion_point(field_get:sundial_rpc.SundialResponse.tuple_data)
  return _internal_tuple_data(index);
}
inline ::sundial_rpc::SundialResponse_TupleData* SundialResponse::_internal_add_tuple_data() {
  return tuple_data_.Add();
}
inline ::sundial_rpc::SundialResponse_TupleData* SundialResponse::add_tuple_data() {
  // @@protoc_insertion_point(field_add:sundial_rpc.SundialResponse.tuple_data)
  return _internal_add_tuple_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sundial_rpc::SundialResponse_TupleData >&
SundialResponse::tuple_data() const {
  // @@protoc_insertion_point(field_list:sundial_rpc.SundialResponse.tuple_data)
  return tuple_data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sundial_rpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sundial_rpc::SundialRequest_RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sundial_rpc::SundialRequest_RequestType>() {
  return ::sundial_rpc::SundialRequest_RequestType_descriptor();
}
template <> struct is_proto_enum< ::sundial_rpc::SundialResponse_ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sundial_rpc::SundialResponse_ResponseType>() {
  return ::sundial_rpc::SundialResponse_ResponseType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sundial_2eproto
