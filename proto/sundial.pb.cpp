// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sundial.proto

#include "sundial.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sundial_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SundialRequest_ReadRequest_sundial_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sundial_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SundialRequest_TupleData_sundial_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sundial_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SundialResponse_TupleData_sundial_2eproto;
namespace sundial_rpc {
class SundialRequest_ReadRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SundialRequest_ReadRequest> _instance;
} _SundialRequest_ReadRequest_default_instance_;
class SundialRequest_TupleDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SundialRequest_TupleData> _instance;
} _SundialRequest_TupleData_default_instance_;
class SundialRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SundialRequest> _instance;
} _SundialRequest_default_instance_;
class SundialResponse_TupleDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SundialResponse_TupleData> _instance;
} _SundialResponse_TupleData_default_instance_;
class SundialResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SundialResponse> _instance;
} _SundialResponse_default_instance_;
}  // namespace sundial_rpc
static void InitDefaultsscc_info_SundialRequest_sundial_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sundial_rpc::_SundialRequest_default_instance_;
    new (ptr) ::sundial_rpc::SundialRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sundial_rpc::SundialRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SundialRequest_sundial_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SundialRequest_sundial_2eproto}, {
      &scc_info_SundialRequest_ReadRequest_sundial_2eproto.base,
      &scc_info_SundialRequest_TupleData_sundial_2eproto.base,}};

static void InitDefaultsscc_info_SundialRequest_ReadRequest_sundial_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sundial_rpc::_SundialRequest_ReadRequest_default_instance_;
    new (ptr) ::sundial_rpc::SundialRequest_ReadRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sundial_rpc::SundialRequest_ReadRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SundialRequest_ReadRequest_sundial_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SundialRequest_ReadRequest_sundial_2eproto}, {}};

static void InitDefaultsscc_info_SundialRequest_TupleData_sundial_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sundial_rpc::_SundialRequest_TupleData_default_instance_;
    new (ptr) ::sundial_rpc::SundialRequest_TupleData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sundial_rpc::SundialRequest_TupleData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SundialRequest_TupleData_sundial_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SundialRequest_TupleData_sundial_2eproto}, {}};

static void InitDefaultsscc_info_SundialResponse_sundial_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sundial_rpc::_SundialResponse_default_instance_;
    new (ptr) ::sundial_rpc::SundialResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sundial_rpc::SundialResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SundialResponse_sundial_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SundialResponse_sundial_2eproto}, {
      &scc_info_SundialResponse_TupleData_sundial_2eproto.base,}};

static void InitDefaultsscc_info_SundialResponse_TupleData_sundial_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sundial_rpc::_SundialResponse_TupleData_default_instance_;
    new (ptr) ::sundial_rpc::SundialResponse_TupleData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sundial_rpc::SundialResponse_TupleData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SundialResponse_TupleData_sundial_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SundialResponse_TupleData_sundial_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sundial_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sundial_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sundial_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sundial_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialRequest_ReadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialRequest_ReadRequest, key_),
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialRequest_ReadRequest, index_id_),
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialRequest_ReadRequest, access_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialRequest_TupleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialRequest_TupleData, key_),
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialRequest_TupleData, table_id_),
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialRequest_TupleData, size_),
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialRequest_TupleData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialRequest, txn_id_),
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialRequest, request_type_),
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialRequest, read_requests_),
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialRequest, tuple_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialResponse_TupleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialResponse_TupleData, key_),
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialResponse_TupleData, table_id_),
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialResponse_TupleData, size_),
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialResponse_TupleData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialResponse, txn_id_),
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialResponse, response_type_),
  PROTOBUF_FIELD_OFFSET(::sundial_rpc::SundialResponse, tuple_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sundial_rpc::SundialRequest_ReadRequest)},
  { 8, -1, sizeof(::sundial_rpc::SundialRequest_TupleData)},
  { 17, -1, sizeof(::sundial_rpc::SundialRequest)},
  { 26, -1, sizeof(::sundial_rpc::SundialResponse_TupleData)},
  { 35, -1, sizeof(::sundial_rpc::SundialResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sundial_rpc::_SundialRequest_ReadRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sundial_rpc::_SundialRequest_TupleData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sundial_rpc::_SundialRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sundial_rpc::_SundialResponse_TupleData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sundial_rpc::_SundialResponse_default_instance_),
};

const char descriptor_table_protodef_sundial_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rsundial.proto\022\013sundial_rpc\"\322\003\n\016Sundial"
  "Request\022\016\n\006txn_id\030\001 \001(\004\022=\n\014request_type\030"
  "\002 \001(\0162\'.sundial_rpc.SundialRequest.Reque"
  "stType\022>\n\rread_requests\030\003 \003(\0132\'.sundial_"
  "rpc.SundialRequest.ReadRequest\0229\n\ntuple_"
  "data\030\004 \003(\0132%.sundial_rpc.SundialRequest."
  "TupleData\032A\n\013ReadRequest\022\013\n\003key\030\001 \001(\004\022\020\n"
  "\010index_id\030\002 \001(\004\022\023\n\013access_type\030\003 \001(\004\032F\n\t"
  "TupleData\022\013\n\003key\030\001 \001(\004\022\020\n\010table_id\030\002 \001(\004"
  "\022\014\n\004size\030\003 \001(\004\022\014\n\004data\030\004 \001(\014\"k\n\013RequestT"
  "ype\022\014\n\010READ_REQ\020\000\022\017\n\013PREPARE_REQ\020\001\022\016\n\nCO"
  "MMIT_REQ\020\002\022\r\n\tABORT_REQ\020\003\022\013\n\007SYS_REQ\020\004\022\021"
  "\n\rNUM_REQ_TYPES\020\005\"\371\002\n\017SundialResponse\022\016\n"
  "\006txn_id\030\001 \001(\004\022@\n\rresponse_type\030\002 \001(\0162).s"
  "undial_rpc.SundialResponse.ResponseType\022"
  ":\n\ntuple_data\030\003 \003(\0132&.sundial_rpc.Sundia"
  "lResponse.TupleData\032F\n\tTupleData\022\013\n\003key\030"
  "\001 \001(\004\022\020\n\010table_id\030\002 \001(\004\022\014\n\004size\030\003 \001(\004\022\014\n"
  "\004data\030\004 \001(\014\"\217\001\n\014ResponseType\022\013\n\007RESP_OK\020"
  "\000\022\016\n\nRESP_ABORT\020\001\022\017\n\013PREPARED_OK\020\002\022\022\n\016PR"
  "EPARED_OK_RO\020\003\022\022\n\016PREPARED_ABORT\020\004\022\007\n\003AC"
  "K\020\005\022\014\n\010SYS_RESP\020\006\022\022\n\016NUM_RESP_TYPES\020\0072Z\n"
  "\nSundialRPC\022L\n\rcontactRemote\022\033.sundial_r"
  "pc.SundialRequest\032\034.sundial_rpc.SundialR"
  "esponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sundial_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sundial_2eproto_sccs[5] = {
  &scc_info_SundialRequest_sundial_2eproto.base,
  &scc_info_SundialRequest_ReadRequest_sundial_2eproto.base,
  &scc_info_SundialRequest_TupleData_sundial_2eproto.base,
  &scc_info_SundialResponse_sundial_2eproto.base,
  &scc_info_SundialResponse_TupleData_sundial_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sundial_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sundial_2eproto = {
  false, false, descriptor_table_protodef_sundial_2eproto, "sundial.proto", 977,
  &descriptor_table_sundial_2eproto_once, descriptor_table_sundial_2eproto_sccs, descriptor_table_sundial_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_sundial_2eproto::offsets,
  file_level_metadata_sundial_2eproto, 5, file_level_enum_descriptors_sundial_2eproto, file_level_service_descriptors_sundial_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sundial_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sundial_2eproto)), true);
namespace sundial_rpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SundialRequest_RequestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sundial_2eproto);
  return file_level_enum_descriptors_sundial_2eproto[0];
}
bool SundialRequest_RequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SundialRequest_RequestType SundialRequest::READ_REQ;
constexpr SundialRequest_RequestType SundialRequest::PREPARE_REQ;
constexpr SundialRequest_RequestType SundialRequest::COMMIT_REQ;
constexpr SundialRequest_RequestType SundialRequest::ABORT_REQ;
constexpr SundialRequest_RequestType SundialRequest::SYS_REQ;
constexpr SundialRequest_RequestType SundialRequest::NUM_REQ_TYPES;
constexpr SundialRequest_RequestType SundialRequest::RequestType_MIN;
constexpr SundialRequest_RequestType SundialRequest::RequestType_MAX;
constexpr int SundialRequest::RequestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SundialResponse_ResponseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sundial_2eproto);
  return file_level_enum_descriptors_sundial_2eproto[1];
}
bool SundialResponse_ResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SundialResponse_ResponseType SundialResponse::RESP_OK;
constexpr SundialResponse_ResponseType SundialResponse::RESP_ABORT;
constexpr SundialResponse_ResponseType SundialResponse::PREPARED_OK;
constexpr SundialResponse_ResponseType SundialResponse::PREPARED_OK_RO;
constexpr SundialResponse_ResponseType SundialResponse::PREPARED_ABORT;
constexpr SundialResponse_ResponseType SundialResponse::ACK;
constexpr SundialResponse_ResponseType SundialResponse::SYS_RESP;
constexpr SundialResponse_ResponseType SundialResponse::NUM_RESP_TYPES;
constexpr SundialResponse_ResponseType SundialResponse::ResponseType_MIN;
constexpr SundialResponse_ResponseType SundialResponse::ResponseType_MAX;
constexpr int SundialResponse::ResponseType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SundialRequest_ReadRequest::InitAsDefaultInstance() {
}
class SundialRequest_ReadRequest::_Internal {
 public:
};

SundialRequest_ReadRequest::SundialRequest_ReadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sundial_rpc.SundialRequest.ReadRequest)
}
SundialRequest_ReadRequest::SundialRequest_ReadRequest(const SundialRequest_ReadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&access_type_) -
    reinterpret_cast<char*>(&key_)) + sizeof(access_type_));
  // @@protoc_insertion_point(copy_constructor:sundial_rpc.SundialRequest.ReadRequest)
}

void SundialRequest_ReadRequest::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&access_type_) -
      reinterpret_cast<char*>(&key_)) + sizeof(access_type_));
}

SundialRequest_ReadRequest::~SundialRequest_ReadRequest() {
  // @@protoc_insertion_point(destructor:sundial_rpc.SundialRequest.ReadRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SundialRequest_ReadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SundialRequest_ReadRequest::ArenaDtor(void* object) {
  SundialRequest_ReadRequest* _this = reinterpret_cast< SundialRequest_ReadRequest* >(object);
  (void)_this;
}
void SundialRequest_ReadRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SundialRequest_ReadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SundialRequest_ReadRequest& SundialRequest_ReadRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SundialRequest_ReadRequest_sundial_2eproto.base);
  return *internal_default_instance();
}


void SundialRequest_ReadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sundial_rpc.SundialRequest.ReadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&access_type_) -
      reinterpret_cast<char*>(&key_)) + sizeof(access_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SundialRequest_ReadRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 index_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 access_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          access_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SundialRequest_ReadRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sundial_rpc.SundialRequest.ReadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 key = 1;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_key(), target);
  }

  // uint64 index_id = 2;
  if (this->index_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_index_id(), target);
  }

  // uint64 access_type = 3;
  if (this->access_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_access_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sundial_rpc.SundialRequest.ReadRequest)
  return target;
}

size_t SundialRequest_ReadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sundial_rpc.SundialRequest.ReadRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_key());
  }

  // uint64 index_id = 2;
  if (this->index_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_index_id());
  }

  // uint64 access_type = 3;
  if (this->access_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_access_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SundialRequest_ReadRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sundial_rpc.SundialRequest.ReadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SundialRequest_ReadRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SundialRequest_ReadRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sundial_rpc.SundialRequest.ReadRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sundial_rpc.SundialRequest.ReadRequest)
    MergeFrom(*source);
  }
}

void SundialRequest_ReadRequest::MergeFrom(const SundialRequest_ReadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sundial_rpc.SundialRequest.ReadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.index_id() != 0) {
    _internal_set_index_id(from._internal_index_id());
  }
  if (from.access_type() != 0) {
    _internal_set_access_type(from._internal_access_type());
  }
}

void SundialRequest_ReadRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sundial_rpc.SundialRequest.ReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SundialRequest_ReadRequest::CopyFrom(const SundialRequest_ReadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sundial_rpc.SundialRequest.ReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SundialRequest_ReadRequest::IsInitialized() const {
  return true;
}

void SundialRequest_ReadRequest::InternalSwap(SundialRequest_ReadRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SundialRequest_ReadRequest, access_type_)
      + sizeof(SundialRequest_ReadRequest::access_type_)
      - PROTOBUF_FIELD_OFFSET(SundialRequest_ReadRequest, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SundialRequest_ReadRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SundialRequest_TupleData::InitAsDefaultInstance() {
}
class SundialRequest_TupleData::_Internal {
 public:
};

SundialRequest_TupleData::SundialRequest_TupleData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sundial_rpc.SundialRequest.TupleData)
}
SundialRequest_TupleData::SundialRequest_TupleData(const SundialRequest_TupleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&key_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:sundial_rpc.SundialRequest.TupleData)
}

void SundialRequest_TupleData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SundialRequest_TupleData_sundial_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&key_)) + sizeof(size_));
}

SundialRequest_TupleData::~SundialRequest_TupleData() {
  // @@protoc_insertion_point(destructor:sundial_rpc.SundialRequest.TupleData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SundialRequest_TupleData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SundialRequest_TupleData::ArenaDtor(void* object) {
  SundialRequest_TupleData* _this = reinterpret_cast< SundialRequest_TupleData* >(object);
  (void)_this;
}
void SundialRequest_TupleData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SundialRequest_TupleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SundialRequest_TupleData& SundialRequest_TupleData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SundialRequest_TupleData_sundial_2eproto.base);
  return *internal_default_instance();
}


void SundialRequest_TupleData::Clear() {
// @@protoc_insertion_point(message_clear_start:sundial_rpc.SundialRequest.TupleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&key_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SundialRequest_TupleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SundialRequest_TupleData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sundial_rpc.SundialRequest.TupleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 key = 1;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_key(), target);
  }

  // uint64 table_id = 2;
  if (this->table_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_table_id(), target);
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sundial_rpc.SundialRequest.TupleData)
  return target;
}

size_t SundialRequest_TupleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sundial_rpc.SundialRequest.TupleData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_key());
  }

  // uint64 table_id = 2;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_table_id());
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SundialRequest_TupleData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sundial_rpc.SundialRequest.TupleData)
  GOOGLE_DCHECK_NE(&from, this);
  const SundialRequest_TupleData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SundialRequest_TupleData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sundial_rpc.SundialRequest.TupleData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sundial_rpc.SundialRequest.TupleData)
    MergeFrom(*source);
  }
}

void SundialRequest_TupleData::MergeFrom(const SundialRequest_TupleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sundial_rpc.SundialRequest.TupleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.table_id() != 0) {
    _internal_set_table_id(from._internal_table_id());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void SundialRequest_TupleData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sundial_rpc.SundialRequest.TupleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SundialRequest_TupleData::CopyFrom(const SundialRequest_TupleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sundial_rpc.SundialRequest.TupleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SundialRequest_TupleData::IsInitialized() const {
  return true;
}

void SundialRequest_TupleData::InternalSwap(SundialRequest_TupleData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SundialRequest_TupleData, size_)
      + sizeof(SundialRequest_TupleData::size_)
      - PROTOBUF_FIELD_OFFSET(SundialRequest_TupleData, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SundialRequest_TupleData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SundialRequest::InitAsDefaultInstance() {
}
class SundialRequest::_Internal {
 public:
};

SundialRequest::SundialRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  read_requests_(arena),
  tuple_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sundial_rpc.SundialRequest)
}
SundialRequest::SundialRequest(const SundialRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      read_requests_(from.read_requests_),
      tuple_data_(from.tuple_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&txn_id_, &from.txn_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_type_) -
    reinterpret_cast<char*>(&txn_id_)) + sizeof(request_type_));
  // @@protoc_insertion_point(copy_constructor:sundial_rpc.SundialRequest)
}

void SundialRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SundialRequest_sundial_2eproto.base);
  ::memset(&txn_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_type_) -
      reinterpret_cast<char*>(&txn_id_)) + sizeof(request_type_));
}

SundialRequest::~SundialRequest() {
  // @@protoc_insertion_point(destructor:sundial_rpc.SundialRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SundialRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SundialRequest::ArenaDtor(void* object) {
  SundialRequest* _this = reinterpret_cast< SundialRequest* >(object);
  (void)_this;
}
void SundialRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SundialRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SundialRequest& SundialRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SundialRequest_sundial_2eproto.base);
  return *internal_default_instance();
}


void SundialRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sundial_rpc.SundialRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  read_requests_.Clear();
  tuple_data_.Clear();
  ::memset(&txn_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_type_) -
      reinterpret_cast<char*>(&txn_id_)) + sizeof(request_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SundialRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 txn_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sundial_rpc.SundialRequest.RequestType request_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_request_type(static_cast<::sundial_rpc::SundialRequest_RequestType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .sundial_rpc.SundialRequest.ReadRequest read_requests = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_read_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .sundial_rpc.SundialRequest.TupleData tuple_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuple_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SundialRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sundial_rpc.SundialRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 txn_id = 1;
  if (this->txn_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_txn_id(), target);
  }

  // .sundial_rpc.SundialRequest.RequestType request_type = 2;
  if (this->request_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_request_type(), target);
  }

  // repeated .sundial_rpc.SundialRequest.ReadRequest read_requests = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_read_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_read_requests(i), target, stream);
  }

  // repeated .sundial_rpc.SundialRequest.TupleData tuple_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tuple_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_tuple_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sundial_rpc.SundialRequest)
  return target;
}

size_t SundialRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sundial_rpc.SundialRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sundial_rpc.SundialRequest.ReadRequest read_requests = 3;
  total_size += 1UL * this->_internal_read_requests_size();
  for (const auto& msg : this->read_requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sundial_rpc.SundialRequest.TupleData tuple_data = 4;
  total_size += 1UL * this->_internal_tuple_data_size();
  for (const auto& msg : this->tuple_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 txn_id = 1;
  if (this->txn_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_txn_id());
  }

  // .sundial_rpc.SundialRequest.RequestType request_type = 2;
  if (this->request_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_request_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SundialRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sundial_rpc.SundialRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SundialRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SundialRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sundial_rpc.SundialRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sundial_rpc.SundialRequest)
    MergeFrom(*source);
  }
}

void SundialRequest::MergeFrom(const SundialRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sundial_rpc.SundialRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  read_requests_.MergeFrom(from.read_requests_);
  tuple_data_.MergeFrom(from.tuple_data_);
  if (from.txn_id() != 0) {
    _internal_set_txn_id(from._internal_txn_id());
  }
  if (from.request_type() != 0) {
    _internal_set_request_type(from._internal_request_type());
  }
}

void SundialRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sundial_rpc.SundialRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SundialRequest::CopyFrom(const SundialRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sundial_rpc.SundialRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SundialRequest::IsInitialized() const {
  return true;
}

void SundialRequest::InternalSwap(SundialRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  read_requests_.InternalSwap(&other->read_requests_);
  tuple_data_.InternalSwap(&other->tuple_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SundialRequest, request_type_)
      + sizeof(SundialRequest::request_type_)
      - PROTOBUF_FIELD_OFFSET(SundialRequest, txn_id_)>(
          reinterpret_cast<char*>(&txn_id_),
          reinterpret_cast<char*>(&other->txn_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SundialRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SundialResponse_TupleData::InitAsDefaultInstance() {
}
class SundialResponse_TupleData::_Internal {
 public:
};

SundialResponse_TupleData::SundialResponse_TupleData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sundial_rpc.SundialResponse.TupleData)
}
SundialResponse_TupleData::SundialResponse_TupleData(const SundialResponse_TupleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&key_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:sundial_rpc.SundialResponse.TupleData)
}

void SundialResponse_TupleData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SundialResponse_TupleData_sundial_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&key_)) + sizeof(size_));
}

SundialResponse_TupleData::~SundialResponse_TupleData() {
  // @@protoc_insertion_point(destructor:sundial_rpc.SundialResponse.TupleData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SundialResponse_TupleData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SundialResponse_TupleData::ArenaDtor(void* object) {
  SundialResponse_TupleData* _this = reinterpret_cast< SundialResponse_TupleData* >(object);
  (void)_this;
}
void SundialResponse_TupleData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SundialResponse_TupleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SundialResponse_TupleData& SundialResponse_TupleData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SundialResponse_TupleData_sundial_2eproto.base);
  return *internal_default_instance();
}


void SundialResponse_TupleData::Clear() {
// @@protoc_insertion_point(message_clear_start:sundial_rpc.SundialResponse.TupleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&key_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SundialResponse_TupleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SundialResponse_TupleData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sundial_rpc.SundialResponse.TupleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 key = 1;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_key(), target);
  }

  // uint64 table_id = 2;
  if (this->table_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_table_id(), target);
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sundial_rpc.SundialResponse.TupleData)
  return target;
}

size_t SundialResponse_TupleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sundial_rpc.SundialResponse.TupleData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_key());
  }

  // uint64 table_id = 2;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_table_id());
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SundialResponse_TupleData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sundial_rpc.SundialResponse.TupleData)
  GOOGLE_DCHECK_NE(&from, this);
  const SundialResponse_TupleData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SundialResponse_TupleData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sundial_rpc.SundialResponse.TupleData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sundial_rpc.SundialResponse.TupleData)
    MergeFrom(*source);
  }
}

void SundialResponse_TupleData::MergeFrom(const SundialResponse_TupleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sundial_rpc.SundialResponse.TupleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.table_id() != 0) {
    _internal_set_table_id(from._internal_table_id());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void SundialResponse_TupleData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sundial_rpc.SundialResponse.TupleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SundialResponse_TupleData::CopyFrom(const SundialResponse_TupleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sundial_rpc.SundialResponse.TupleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SundialResponse_TupleData::IsInitialized() const {
  return true;
}

void SundialResponse_TupleData::InternalSwap(SundialResponse_TupleData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SundialResponse_TupleData, size_)
      + sizeof(SundialResponse_TupleData::size_)
      - PROTOBUF_FIELD_OFFSET(SundialResponse_TupleData, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SundialResponse_TupleData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SundialResponse::InitAsDefaultInstance() {
}
class SundialResponse::_Internal {
 public:
};

SundialResponse::SundialResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tuple_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sundial_rpc.SundialResponse)
}
SundialResponse::SundialResponse(const SundialResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tuple_data_(from.tuple_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&txn_id_, &from.txn_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_type_) -
    reinterpret_cast<char*>(&txn_id_)) + sizeof(response_type_));
  // @@protoc_insertion_point(copy_constructor:sundial_rpc.SundialResponse)
}

void SundialResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SundialResponse_sundial_2eproto.base);
  ::memset(&txn_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_type_) -
      reinterpret_cast<char*>(&txn_id_)) + sizeof(response_type_));
}

SundialResponse::~SundialResponse() {
  // @@protoc_insertion_point(destructor:sundial_rpc.SundialResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SundialResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SundialResponse::ArenaDtor(void* object) {
  SundialResponse* _this = reinterpret_cast< SundialResponse* >(object);
  (void)_this;
}
void SundialResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SundialResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SundialResponse& SundialResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SundialResponse_sundial_2eproto.base);
  return *internal_default_instance();
}


void SundialResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sundial_rpc.SundialResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tuple_data_.Clear();
  ::memset(&txn_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_type_) -
      reinterpret_cast<char*>(&txn_id_)) + sizeof(response_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SundialResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 txn_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sundial_rpc.SundialResponse.ResponseType response_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_response_type(static_cast<::sundial_rpc::SundialResponse_ResponseType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .sundial_rpc.SundialResponse.TupleData tuple_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuple_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SundialResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sundial_rpc.SundialResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 txn_id = 1;
  if (this->txn_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_txn_id(), target);
  }

  // .sundial_rpc.SundialResponse.ResponseType response_type = 2;
  if (this->response_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_response_type(), target);
  }

  // repeated .sundial_rpc.SundialResponse.TupleData tuple_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tuple_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tuple_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sundial_rpc.SundialResponse)
  return target;
}

size_t SundialResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sundial_rpc.SundialResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sundial_rpc.SundialResponse.TupleData tuple_data = 3;
  total_size += 1UL * this->_internal_tuple_data_size();
  for (const auto& msg : this->tuple_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 txn_id = 1;
  if (this->txn_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_txn_id());
  }

  // .sundial_rpc.SundialResponse.ResponseType response_type = 2;
  if (this->response_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SundialResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sundial_rpc.SundialResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SundialResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SundialResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sundial_rpc.SundialResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sundial_rpc.SundialResponse)
    MergeFrom(*source);
  }
}

void SundialResponse::MergeFrom(const SundialResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sundial_rpc.SundialResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tuple_data_.MergeFrom(from.tuple_data_);
  if (from.txn_id() != 0) {
    _internal_set_txn_id(from._internal_txn_id());
  }
  if (from.response_type() != 0) {
    _internal_set_response_type(from._internal_response_type());
  }
}

void SundialResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sundial_rpc.SundialResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SundialResponse::CopyFrom(const SundialResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sundial_rpc.SundialResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SundialResponse::IsInitialized() const {
  return true;
}

void SundialResponse::InternalSwap(SundialResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tuple_data_.InternalSwap(&other->tuple_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SundialResponse, response_type_)
      + sizeof(SundialResponse::response_type_)
      - PROTOBUF_FIELD_OFFSET(SundialResponse, txn_id_)>(
          reinterpret_cast<char*>(&txn_id_),
          reinterpret_cast<char*>(&other->txn_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SundialResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sundial_rpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sundial_rpc::SundialRequest_ReadRequest* Arena::CreateMaybeMessage< ::sundial_rpc::SundialRequest_ReadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sundial_rpc::SundialRequest_ReadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sundial_rpc::SundialRequest_TupleData* Arena::CreateMaybeMessage< ::sundial_rpc::SundialRequest_TupleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sundial_rpc::SundialRequest_TupleData >(arena);
}
template<> PROTOBUF_NOINLINE ::sundial_rpc::SundialRequest* Arena::CreateMaybeMessage< ::sundial_rpc::SundialRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sundial_rpc::SundialRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sundial_rpc::SundialResponse_TupleData* Arena::CreateMaybeMessage< ::sundial_rpc::SundialResponse_TupleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sundial_rpc::SundialResponse_TupleData >(arena);
}
template<> PROTOBUF_NOINLINE ::sundial_rpc::SundialResponse* Arena::CreateMaybeMessage< ::sundial_rpc::SundialResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sundial_rpc::SundialResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
